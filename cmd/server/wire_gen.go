// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"microServiceTemplate/internal/biz"
	"microServiceTemplate/internal/conf"
	"microServiceTemplate/internal/data"
	"microServiceTemplate/internal/data/eventimpl"
	"microServiceTemplate/internal/data/repositoryimpl"
	"microServiceTemplate/internal/pkg"
	log2 "microServiceTemplate/internal/pkg/log"
	"microServiceTemplate/internal/server"
	"microServiceTemplate/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger, accessLogger *log2.AccessLogger) (*kratos.App, func(), error) {
	helper := pkg.NewLogHelper(logger)
	dataData, cleanup, err := data.NewData(bootstrap, helper)
	if err != nil {
		return nil, nil, err
	}
	orderRepo := repositoryimpl.NewOrderRepoImpl(dataData)
	transactionRepo := data.NewTransaction(dataData, helper)
	sendEvent := eventimpl.NewSendEventImpl(helper, dataData)
	orderBiz := biz.NewOrderBiz(orderRepo, transactionRepo, helper, sendEvent)
	orderService := service.NewOrderService(orderBiz, helper)
	grpcServer := server.NewGRPCServer(bootstrap, helper, accessLogger, orderService)
	consumerEvent := eventimpl.NewConsumerServiceImpl(bootstrap, helper)
	orderConsumerService := service.NewOrderConsumerService(helper)
	consumerServer := server.NewConsumerServer(helper, consumerEvent, orderConsumerService)
	monitorLogServer := server.NewMonitorLogServer(bootstrap, helper)
	demoCliService := service.NewDemoCliService(helper)
	cliServer := server.NewCliServer(demoCliService)
	app := newApp(logger, grpcServer, consumerServer, monitorLogServer, cliServer)
	return app, func() {
		cleanup()
	}, nil
}
