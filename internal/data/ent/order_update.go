// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"microServiceTemplate/internal/data/ent/order"
	"microServiceTemplate/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetOrderNo sets the "order_no" field.
func (ou *OrderUpdate) SetOrderNo(s string) *OrderUpdate {
	ou.mutation.SetOrderNo(s)
	return ou
}

// SetUserID sets the "user_id" field.
func (ou *OrderUpdate) SetUserID(i int) *OrderUpdate {
	ou.mutation.ResetUserID()
	ou.mutation.SetUserID(i)
	return ou
}

// AddUserID adds i to the "user_id" field.
func (ou *OrderUpdate) AddUserID(i int) *OrderUpdate {
	ou.mutation.AddUserID(i)
	return ou
}

// SetProductID sets the "product_id" field.
func (ou *OrderUpdate) SetProductID(i int) *OrderUpdate {
	ou.mutation.ResetProductID()
	ou.mutation.SetProductID(i)
	return ou
}

// AddProductID adds i to the "product_id" field.
func (ou *OrderUpdate) AddProductID(i int) *OrderUpdate {
	ou.mutation.AddProductID(i)
	return ou
}

// SetProductName sets the "product_name" field.
func (ou *OrderUpdate) SetProductName(s string) *OrderUpdate {
	ou.mutation.SetProductName(s)
	return ou
}

// SetProductLogo sets the "product_logo" field.
func (ou *OrderUpdate) SetProductLogo(s string) *OrderUpdate {
	ou.mutation.SetProductLogo(s)
	return ou
}

// SetPrice sets the "price" field.
func (ou *OrderUpdate) SetPrice(f float64) *OrderUpdate {
	ou.mutation.ResetPrice()
	ou.mutation.SetPrice(f)
	return ou
}

// AddPrice adds f to the "price" field.
func (ou *OrderUpdate) AddPrice(f float64) *OrderUpdate {
	ou.mutation.AddPrice(f)
	return ou
}

// SetDenomination sets the "denomination" field.
func (ou *OrderUpdate) SetDenomination(f float64) *OrderUpdate {
	ou.mutation.ResetDenomination()
	ou.mutation.SetDenomination(f)
	return ou
}

// AddDenomination adds f to the "denomination" field.
func (ou *OrderUpdate) AddDenomination(f float64) *OrderUpdate {
	ou.mutation.AddDenomination(f)
	return ou
}

// SetOriginalPrice sets the "original_price" field.
func (ou *OrderUpdate) SetOriginalPrice(f float64) *OrderUpdate {
	ou.mutation.ResetOriginalPrice()
	ou.mutation.SetOriginalPrice(f)
	return ou
}

// AddOriginalPrice adds f to the "original_price" field.
func (ou *OrderUpdate) AddOriginalPrice(f float64) *OrderUpdate {
	ou.mutation.AddOriginalPrice(f)
	return ou
}

// SetUnitPrice sets the "unit_price" field.
func (ou *OrderUpdate) SetUnitPrice(f float64) *OrderUpdate {
	ou.mutation.ResetUnitPrice()
	ou.mutation.SetUnitPrice(f)
	return ou
}

// AddUnitPrice adds f to the "unit_price" field.
func (ou *OrderUpdate) AddUnitPrice(f float64) *OrderUpdate {
	ou.mutation.AddUnitPrice(f)
	return ou
}

// SetNum sets the "num" field.
func (ou *OrderUpdate) SetNum(i int) *OrderUpdate {
	ou.mutation.ResetNum()
	ou.mutation.SetNum(i)
	return ou
}

// AddNum adds i to the "num" field.
func (ou *OrderUpdate) AddNum(i int) *OrderUpdate {
	ou.mutation.AddNum(i)
	return ou
}

// SetProductType sets the "product_type" field.
func (ou *OrderUpdate) SetProductType(i int) *OrderUpdate {
	ou.mutation.ResetProductType()
	ou.mutation.SetProductType(i)
	return ou
}

// AddProductType adds i to the "product_type" field.
func (ou *OrderUpdate) AddProductType(i int) *OrderUpdate {
	ou.mutation.AddProductType(i)
	return ou
}

// SetStatus sets the "status" field.
func (ou *OrderUpdate) SetStatus(i int) *OrderUpdate {
	ou.mutation.ResetStatus()
	ou.mutation.SetStatus(i)
	return ou
}

// AddStatus adds i to the "status" field.
func (ou *OrderUpdate) AddStatus(i int) *OrderUpdate {
	ou.mutation.AddStatus(i)
	return ou
}

// SetUDeleteTime sets the "u_delete_time" field.
func (ou *OrderUpdate) SetUDeleteTime(t time.Time) *OrderUpdate {
	ou.mutation.SetUDeleteTime(t)
	return ou
}

// SetNillableUDeleteTime sets the "u_delete_time" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableUDeleteTime(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetUDeleteTime(*t)
	}
	return ou
}

// ClearUDeleteTime clears the value of the "u_delete_time" field.
func (ou *OrderUpdate) ClearUDeleteTime() *OrderUpdate {
	ou.mutation.ClearUDeleteTime()
	return ou
}

// SetCreateTime sets the "create_time" field.
func (ou *OrderUpdate) SetCreateTime(t time.Time) *OrderUpdate {
	ou.mutation.SetCreateTime(t)
	return ou
}

// SetUpdateTime sets the "update_time" field.
func (ou *OrderUpdate) SetUpdateTime(t time.Time) *OrderUpdate {
	ou.mutation.SetUpdateTime(t)
	return ou
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, OrderMutation](ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ou *OrderUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdate {
	ou.modifiers = append(ou.modifiers, modifiers...)
	return ou
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ou.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.ProductID(); ok {
		_spec.SetField(order.FieldProductID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedProductID(); ok {
		_spec.AddField(order.FieldProductID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.ProductName(); ok {
		_spec.SetField(order.FieldProductName, field.TypeString, value)
	}
	if value, ok := ou.mutation.ProductLogo(); ok {
		_spec.SetField(order.FieldProductLogo, field.TypeString, value)
	}
	if value, ok := ou.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Denomination(); ok {
		_spec.SetField(order.FieldDenomination, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedDenomination(); ok {
		_spec.AddField(order.FieldDenomination, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.OriginalPrice(); ok {
		_spec.SetField(order.FieldOriginalPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedOriginalPrice(); ok {
		_spec.AddField(order.FieldOriginalPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.UnitPrice(); ok {
		_spec.SetField(order.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.AddedUnitPrice(); ok {
		_spec.AddField(order.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := ou.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedNum(); ok {
		_spec.AddField(order.FieldNum, field.TypeInt, value)
	}
	if value, ok := ou.mutation.ProductType(); ok {
		_spec.SetField(order.FieldProductType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedProductType(); ok {
		_spec.AddField(order.FieldProductType, field.TypeInt, value)
	}
	if value, ok := ou.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ou.mutation.UDeleteTime(); ok {
		_spec.SetField(order.FieldUDeleteTime, field.TypeTime, value)
	}
	if ou.mutation.UDeleteTimeCleared() {
		_spec.ClearField(order.FieldUDeleteTime, field.TypeTime)
	}
	if value, ok := ou.mutation.CreateTime(); ok {
		_spec.SetField(order.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ou.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(ou.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OrderMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOrderNo sets the "order_no" field.
func (ouo *OrderUpdateOne) SetOrderNo(s string) *OrderUpdateOne {
	ouo.mutation.SetOrderNo(s)
	return ouo
}

// SetUserID sets the "user_id" field.
func (ouo *OrderUpdateOne) SetUserID(i int) *OrderUpdateOne {
	ouo.mutation.ResetUserID()
	ouo.mutation.SetUserID(i)
	return ouo
}

// AddUserID adds i to the "user_id" field.
func (ouo *OrderUpdateOne) AddUserID(i int) *OrderUpdateOne {
	ouo.mutation.AddUserID(i)
	return ouo
}

// SetProductID sets the "product_id" field.
func (ouo *OrderUpdateOne) SetProductID(i int) *OrderUpdateOne {
	ouo.mutation.ResetProductID()
	ouo.mutation.SetProductID(i)
	return ouo
}

// AddProductID adds i to the "product_id" field.
func (ouo *OrderUpdateOne) AddProductID(i int) *OrderUpdateOne {
	ouo.mutation.AddProductID(i)
	return ouo
}

// SetProductName sets the "product_name" field.
func (ouo *OrderUpdateOne) SetProductName(s string) *OrderUpdateOne {
	ouo.mutation.SetProductName(s)
	return ouo
}

// SetProductLogo sets the "product_logo" field.
func (ouo *OrderUpdateOne) SetProductLogo(s string) *OrderUpdateOne {
	ouo.mutation.SetProductLogo(s)
	return ouo
}

// SetPrice sets the "price" field.
func (ouo *OrderUpdateOne) SetPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetPrice()
	ouo.mutation.SetPrice(f)
	return ouo
}

// AddPrice adds f to the "price" field.
func (ouo *OrderUpdateOne) AddPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddPrice(f)
	return ouo
}

// SetDenomination sets the "denomination" field.
func (ouo *OrderUpdateOne) SetDenomination(f float64) *OrderUpdateOne {
	ouo.mutation.ResetDenomination()
	ouo.mutation.SetDenomination(f)
	return ouo
}

// AddDenomination adds f to the "denomination" field.
func (ouo *OrderUpdateOne) AddDenomination(f float64) *OrderUpdateOne {
	ouo.mutation.AddDenomination(f)
	return ouo
}

// SetOriginalPrice sets the "original_price" field.
func (ouo *OrderUpdateOne) SetOriginalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetOriginalPrice()
	ouo.mutation.SetOriginalPrice(f)
	return ouo
}

// AddOriginalPrice adds f to the "original_price" field.
func (ouo *OrderUpdateOne) AddOriginalPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddOriginalPrice(f)
	return ouo
}

// SetUnitPrice sets the "unit_price" field.
func (ouo *OrderUpdateOne) SetUnitPrice(f float64) *OrderUpdateOne {
	ouo.mutation.ResetUnitPrice()
	ouo.mutation.SetUnitPrice(f)
	return ouo
}

// AddUnitPrice adds f to the "unit_price" field.
func (ouo *OrderUpdateOne) AddUnitPrice(f float64) *OrderUpdateOne {
	ouo.mutation.AddUnitPrice(f)
	return ouo
}

// SetNum sets the "num" field.
func (ouo *OrderUpdateOne) SetNum(i int) *OrderUpdateOne {
	ouo.mutation.ResetNum()
	ouo.mutation.SetNum(i)
	return ouo
}

// AddNum adds i to the "num" field.
func (ouo *OrderUpdateOne) AddNum(i int) *OrderUpdateOne {
	ouo.mutation.AddNum(i)
	return ouo
}

// SetProductType sets the "product_type" field.
func (ouo *OrderUpdateOne) SetProductType(i int) *OrderUpdateOne {
	ouo.mutation.ResetProductType()
	ouo.mutation.SetProductType(i)
	return ouo
}

// AddProductType adds i to the "product_type" field.
func (ouo *OrderUpdateOne) AddProductType(i int) *OrderUpdateOne {
	ouo.mutation.AddProductType(i)
	return ouo
}

// SetStatus sets the "status" field.
func (ouo *OrderUpdateOne) SetStatus(i int) *OrderUpdateOne {
	ouo.mutation.ResetStatus()
	ouo.mutation.SetStatus(i)
	return ouo
}

// AddStatus adds i to the "status" field.
func (ouo *OrderUpdateOne) AddStatus(i int) *OrderUpdateOne {
	ouo.mutation.AddStatus(i)
	return ouo
}

// SetUDeleteTime sets the "u_delete_time" field.
func (ouo *OrderUpdateOne) SetUDeleteTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUDeleteTime(t)
	return ouo
}

// SetNillableUDeleteTime sets the "u_delete_time" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableUDeleteTime(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetUDeleteTime(*t)
	}
	return ouo
}

// ClearUDeleteTime clears the value of the "u_delete_time" field.
func (ouo *OrderUpdateOne) ClearUDeleteTime() *OrderUpdateOne {
	ouo.mutation.ClearUDeleteTime()
	return ouo
}

// SetCreateTime sets the "create_time" field.
func (ouo *OrderUpdateOne) SetCreateTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreateTime(t)
	return ouo
}

// SetUpdateTime sets the "update_time" field.
func (ouo *OrderUpdateOne) SetUpdateTime(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetUpdateTime(t)
	return ouo
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	return withHooks[*Order, OrderMutation](ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ouo *OrderUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OrderUpdateOne {
	ouo.modifiers = append(ouo.modifiers, modifiers...)
	return ouo
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   order.Table,
			Columns: order.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		},
	}
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
	}
	if value, ok := ouo.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedUserID(); ok {
		_spec.AddField(order.FieldUserID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.ProductID(); ok {
		_spec.SetField(order.FieldProductID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedProductID(); ok {
		_spec.AddField(order.FieldProductID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.ProductName(); ok {
		_spec.SetField(order.FieldProductName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.ProductLogo(); ok {
		_spec.SetField(order.FieldProductLogo, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedPrice(); ok {
		_spec.AddField(order.FieldPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Denomination(); ok {
		_spec.SetField(order.FieldDenomination, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedDenomination(); ok {
		_spec.AddField(order.FieldDenomination, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.OriginalPrice(); ok {
		_spec.SetField(order.FieldOriginalPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedOriginalPrice(); ok {
		_spec.AddField(order.FieldOriginalPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.UnitPrice(); ok {
		_spec.SetField(order.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.AddedUnitPrice(); ok {
		_spec.AddField(order.FieldUnitPrice, field.TypeFloat64, value)
	}
	if value, ok := ouo.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedNum(); ok {
		_spec.AddField(order.FieldNum, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.ProductType(); ok {
		_spec.SetField(order.FieldProductType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedProductType(); ok {
		_spec.AddField(order.FieldProductType, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedStatus(); ok {
		_spec.AddField(order.FieldStatus, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.UDeleteTime(); ok {
		_spec.SetField(order.FieldUDeleteTime, field.TypeTime, value)
	}
	if ouo.mutation.UDeleteTimeCleared() {
		_spec.ClearField(order.FieldUDeleteTime, field.TypeTime)
	}
	if value, ok := ouo.mutation.CreateTime(); ok {
		_spec.SetField(order.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
	}
	_spec.AddModifiers(ouo.modifiers...)
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
