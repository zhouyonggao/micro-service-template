// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"microServiceTemplate/internal/data/ent/order"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Order is the model entity for the Order schema.
type Order struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 订单号
	OrderNo string `json:"order_no,omitempty"`
	// 下单用户ID
	UserID int `json:"user_id,omitempty"`
	// 商品ID
	ProductID int `json:"product_id,omitempty"`
	// 商品名称
	ProductName string `json:"product_name,omitempty"`
	// 商品logo图片地址
	ProductLogo string `json:"product_logo,omitempty"`
	// 商品价格
	Price float64 `json:"price,omitempty"`
	// 商品面额
	Denomination float64 `json:"denomination,omitempty"`
	// 商品原价
	OriginalPrice float64 `json:"original_price,omitempty"`
	// 商品单价
	UnitPrice float64 `json:"unit_price,omitempty"`
	// 购买数量
	Num int `json:"num,omitempty"`
	// 商品类型
	ProductType int `json:"product_type,omitempty"`
	// 订单状态
	Status int `json:"status,omitempty"`
	// 用户删除时间
	UDeleteTime time.Time `json:"u_delete_time,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 更新时间
	UpdateTime time.Time `json:"update_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Order) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case order.FieldPrice, order.FieldDenomination, order.FieldOriginalPrice, order.FieldUnitPrice:
			values[i] = new(sql.NullFloat64)
		case order.FieldID, order.FieldUserID, order.FieldProductID, order.FieldNum, order.FieldProductType, order.FieldStatus:
			values[i] = new(sql.NullInt64)
		case order.FieldOrderNo, order.FieldProductName, order.FieldProductLogo:
			values[i] = new(sql.NullString)
		case order.FieldUDeleteTime, order.FieldCreateTime, order.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Order", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Order fields.
func (o *Order) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case order.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			o.ID = int(value.Int64)
		case order.FieldOrderNo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field order_no", values[i])
			} else if value.Valid {
				o.OrderNo = value.String
			}
		case order.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				o.UserID = int(value.Int64)
			}
		case order.FieldProductID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_id", values[i])
			} else if value.Valid {
				o.ProductID = int(value.Int64)
			}
		case order.FieldProductName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_name", values[i])
			} else if value.Valid {
				o.ProductName = value.String
			}
		case order.FieldProductLogo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field product_logo", values[i])
			} else if value.Valid {
				o.ProductLogo = value.String
			}
		case order.FieldPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				o.Price = value.Float64
			}
		case order.FieldDenomination:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field denomination", values[i])
			} else if value.Valid {
				o.Denomination = value.Float64
			}
		case order.FieldOriginalPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field original_price", values[i])
			} else if value.Valid {
				o.OriginalPrice = value.Float64
			}
		case order.FieldUnitPrice:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field unit_price", values[i])
			} else if value.Valid {
				o.UnitPrice = value.Float64
			}
		case order.FieldNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num", values[i])
			} else if value.Valid {
				o.Num = int(value.Int64)
			}
		case order.FieldProductType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field product_type", values[i])
			} else if value.Valid {
				o.ProductType = int(value.Int64)
			}
		case order.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				o.Status = int(value.Int64)
			}
		case order.FieldUDeleteTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field u_delete_time", values[i])
			} else if value.Valid {
				o.UDeleteTime = value.Time
			}
		case order.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				o.CreateTime = value.Time
			}
		case order.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				o.UpdateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Order.
// Note that you need to call Order.Unwrap() before calling this method if this Order
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Order) Update() *OrderUpdateOne {
	return NewOrderClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Order entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Order) Unwrap() *Order {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Order is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Order) String() string {
	var builder strings.Builder
	builder.WriteString("Order(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("order_no=")
	builder.WriteString(o.OrderNo)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", o.UserID))
	builder.WriteString(", ")
	builder.WriteString("product_id=")
	builder.WriteString(fmt.Sprintf("%v", o.ProductID))
	builder.WriteString(", ")
	builder.WriteString("product_name=")
	builder.WriteString(o.ProductName)
	builder.WriteString(", ")
	builder.WriteString("product_logo=")
	builder.WriteString(o.ProductLogo)
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", o.Price))
	builder.WriteString(", ")
	builder.WriteString("denomination=")
	builder.WriteString(fmt.Sprintf("%v", o.Denomination))
	builder.WriteString(", ")
	builder.WriteString("original_price=")
	builder.WriteString(fmt.Sprintf("%v", o.OriginalPrice))
	builder.WriteString(", ")
	builder.WriteString("unit_price=")
	builder.WriteString(fmt.Sprintf("%v", o.UnitPrice))
	builder.WriteString(", ")
	builder.WriteString("num=")
	builder.WriteString(fmt.Sprintf("%v", o.Num))
	builder.WriteString(", ")
	builder.WriteString("product_type=")
	builder.WriteString(fmt.Sprintf("%v", o.ProductType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", o.Status))
	builder.WriteString(", ")
	builder.WriteString("u_delete_time=")
	builder.WriteString(o.UDeleteTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(o.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(o.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Orders is a parsable slice of Order.
type Orders []*Order

func (o Orders) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
