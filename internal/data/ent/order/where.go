// Code generated by ent, DO NOT EDIT.

package order

import (
	"microServiceTemplate/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// OrderNo applies equality check predicate on the "order_no" field. It's identical to OrderNoEQ.
func OrderNo(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNo, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// ProductID applies equality check predicate on the "product_id" field. It's identical to ProductIDEQ.
func ProductID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductID, v))
}

// ProductName applies equality check predicate on the "product_name" field. It's identical to ProductNameEQ.
func ProductName(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductName, v))
}

// ProductLogo applies equality check predicate on the "product_logo" field. It's identical to ProductLogoEQ.
func ProductLogo(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductLogo, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrice, v))
}

// Denomination applies equality check predicate on the "denomination" field. It's identical to DenominationEQ.
func Denomination(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDenomination, v))
}

// OriginalPrice applies equality check predicate on the "original_price" field. It's identical to OriginalPriceEQ.
func OriginalPrice(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOriginalPrice, v))
}

// UnitPrice applies equality check predicate on the "unit_price" field. It's identical to UnitPriceEQ.
func UnitPrice(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUnitPrice, v))
}

// Num applies equality check predicate on the "num" field. It's identical to NumEQ.
func Num(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// ProductType applies equality check predicate on the "product_type" field. It's identical to ProductTypeEQ.
func ProductType(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductType, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// UDeleteTime applies equality check predicate on the "u_delete_time" field. It's identical to UDeleteTimeEQ.
func UDeleteTime(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUDeleteTime, v))
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreateTime, v))
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdateTime, v))
}

// OrderNoEQ applies the EQ predicate on the "order_no" field.
func OrderNoEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOrderNo, v))
}

// OrderNoNEQ applies the NEQ predicate on the "order_no" field.
func OrderNoNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOrderNo, v))
}

// OrderNoIn applies the In predicate on the "order_no" field.
func OrderNoIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOrderNo, vs...))
}

// OrderNoNotIn applies the NotIn predicate on the "order_no" field.
func OrderNoNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOrderNo, vs...))
}

// OrderNoGT applies the GT predicate on the "order_no" field.
func OrderNoGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOrderNo, v))
}

// OrderNoGTE applies the GTE predicate on the "order_no" field.
func OrderNoGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOrderNo, v))
}

// OrderNoLT applies the LT predicate on the "order_no" field.
func OrderNoLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOrderNo, v))
}

// OrderNoLTE applies the LTE predicate on the "order_no" field.
func OrderNoLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOrderNo, v))
}

// OrderNoContains applies the Contains predicate on the "order_no" field.
func OrderNoContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldOrderNo, v))
}

// OrderNoHasPrefix applies the HasPrefix predicate on the "order_no" field.
func OrderNoHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldOrderNo, v))
}

// OrderNoHasSuffix applies the HasSuffix predicate on the "order_no" field.
func OrderNoHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldOrderNo, v))
}

// OrderNoEqualFold applies the EqualFold predicate on the "order_no" field.
func OrderNoEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldOrderNo, v))
}

// OrderNoContainsFold applies the ContainsFold predicate on the "order_no" field.
func OrderNoContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldOrderNo, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUserID, v))
}

// ProductIDEQ applies the EQ predicate on the "product_id" field.
func ProductIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductID, v))
}

// ProductIDNEQ applies the NEQ predicate on the "product_id" field.
func ProductIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldProductID, v))
}

// ProductIDIn applies the In predicate on the "product_id" field.
func ProductIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldProductID, vs...))
}

// ProductIDNotIn applies the NotIn predicate on the "product_id" field.
func ProductIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldProductID, vs...))
}

// ProductIDGT applies the GT predicate on the "product_id" field.
func ProductIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldProductID, v))
}

// ProductIDGTE applies the GTE predicate on the "product_id" field.
func ProductIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldProductID, v))
}

// ProductIDLT applies the LT predicate on the "product_id" field.
func ProductIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldProductID, v))
}

// ProductIDLTE applies the LTE predicate on the "product_id" field.
func ProductIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldProductID, v))
}

// ProductNameEQ applies the EQ predicate on the "product_name" field.
func ProductNameEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductName, v))
}

// ProductNameNEQ applies the NEQ predicate on the "product_name" field.
func ProductNameNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldProductName, v))
}

// ProductNameIn applies the In predicate on the "product_name" field.
func ProductNameIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldProductName, vs...))
}

// ProductNameNotIn applies the NotIn predicate on the "product_name" field.
func ProductNameNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldProductName, vs...))
}

// ProductNameGT applies the GT predicate on the "product_name" field.
func ProductNameGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldProductName, v))
}

// ProductNameGTE applies the GTE predicate on the "product_name" field.
func ProductNameGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldProductName, v))
}

// ProductNameLT applies the LT predicate on the "product_name" field.
func ProductNameLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldProductName, v))
}

// ProductNameLTE applies the LTE predicate on the "product_name" field.
func ProductNameLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldProductName, v))
}

// ProductNameContains applies the Contains predicate on the "product_name" field.
func ProductNameContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldProductName, v))
}

// ProductNameHasPrefix applies the HasPrefix predicate on the "product_name" field.
func ProductNameHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldProductName, v))
}

// ProductNameHasSuffix applies the HasSuffix predicate on the "product_name" field.
func ProductNameHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldProductName, v))
}

// ProductNameEqualFold applies the EqualFold predicate on the "product_name" field.
func ProductNameEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldProductName, v))
}

// ProductNameContainsFold applies the ContainsFold predicate on the "product_name" field.
func ProductNameContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldProductName, v))
}

// ProductLogoEQ applies the EQ predicate on the "product_logo" field.
func ProductLogoEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductLogo, v))
}

// ProductLogoNEQ applies the NEQ predicate on the "product_logo" field.
func ProductLogoNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldProductLogo, v))
}

// ProductLogoIn applies the In predicate on the "product_logo" field.
func ProductLogoIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldProductLogo, vs...))
}

// ProductLogoNotIn applies the NotIn predicate on the "product_logo" field.
func ProductLogoNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldProductLogo, vs...))
}

// ProductLogoGT applies the GT predicate on the "product_logo" field.
func ProductLogoGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldProductLogo, v))
}

// ProductLogoGTE applies the GTE predicate on the "product_logo" field.
func ProductLogoGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldProductLogo, v))
}

// ProductLogoLT applies the LT predicate on the "product_logo" field.
func ProductLogoLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldProductLogo, v))
}

// ProductLogoLTE applies the LTE predicate on the "product_logo" field.
func ProductLogoLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldProductLogo, v))
}

// ProductLogoContains applies the Contains predicate on the "product_logo" field.
func ProductLogoContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldProductLogo, v))
}

// ProductLogoHasPrefix applies the HasPrefix predicate on the "product_logo" field.
func ProductLogoHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldProductLogo, v))
}

// ProductLogoHasSuffix applies the HasSuffix predicate on the "product_logo" field.
func ProductLogoHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldProductLogo, v))
}

// ProductLogoEqualFold applies the EqualFold predicate on the "product_logo" field.
func ProductLogoEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldProductLogo, v))
}

// ProductLogoContainsFold applies the ContainsFold predicate on the "product_logo" field.
func ProductLogoContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldProductLogo, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPrice, v))
}

// DenominationEQ applies the EQ predicate on the "denomination" field.
func DenominationEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldDenomination, v))
}

// DenominationNEQ applies the NEQ predicate on the "denomination" field.
func DenominationNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldDenomination, v))
}

// DenominationIn applies the In predicate on the "denomination" field.
func DenominationIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldDenomination, vs...))
}

// DenominationNotIn applies the NotIn predicate on the "denomination" field.
func DenominationNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldDenomination, vs...))
}

// DenominationGT applies the GT predicate on the "denomination" field.
func DenominationGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldDenomination, v))
}

// DenominationGTE applies the GTE predicate on the "denomination" field.
func DenominationGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldDenomination, v))
}

// DenominationLT applies the LT predicate on the "denomination" field.
func DenominationLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldDenomination, v))
}

// DenominationLTE applies the LTE predicate on the "denomination" field.
func DenominationLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldDenomination, v))
}

// OriginalPriceEQ applies the EQ predicate on the "original_price" field.
func OriginalPriceEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldOriginalPrice, v))
}

// OriginalPriceNEQ applies the NEQ predicate on the "original_price" field.
func OriginalPriceNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldOriginalPrice, v))
}

// OriginalPriceIn applies the In predicate on the "original_price" field.
func OriginalPriceIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldOriginalPrice, vs...))
}

// OriginalPriceNotIn applies the NotIn predicate on the "original_price" field.
func OriginalPriceNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldOriginalPrice, vs...))
}

// OriginalPriceGT applies the GT predicate on the "original_price" field.
func OriginalPriceGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldOriginalPrice, v))
}

// OriginalPriceGTE applies the GTE predicate on the "original_price" field.
func OriginalPriceGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldOriginalPrice, v))
}

// OriginalPriceLT applies the LT predicate on the "original_price" field.
func OriginalPriceLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldOriginalPrice, v))
}

// OriginalPriceLTE applies the LTE predicate on the "original_price" field.
func OriginalPriceLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldOriginalPrice, v))
}

// UnitPriceEQ applies the EQ predicate on the "unit_price" field.
func UnitPriceEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUnitPrice, v))
}

// UnitPriceNEQ applies the NEQ predicate on the "unit_price" field.
func UnitPriceNEQ(v float64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUnitPrice, v))
}

// UnitPriceIn applies the In predicate on the "unit_price" field.
func UnitPriceIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUnitPrice, vs...))
}

// UnitPriceNotIn applies the NotIn predicate on the "unit_price" field.
func UnitPriceNotIn(vs ...float64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUnitPrice, vs...))
}

// UnitPriceGT applies the GT predicate on the "unit_price" field.
func UnitPriceGT(v float64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUnitPrice, v))
}

// UnitPriceGTE applies the GTE predicate on the "unit_price" field.
func UnitPriceGTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUnitPrice, v))
}

// UnitPriceLT applies the LT predicate on the "unit_price" field.
func UnitPriceLT(v float64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUnitPrice, v))
}

// UnitPriceLTE applies the LTE predicate on the "unit_price" field.
func UnitPriceLTE(v float64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUnitPrice, v))
}

// NumEQ applies the EQ predicate on the "num" field.
func NumEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldNum, v))
}

// NumNEQ applies the NEQ predicate on the "num" field.
func NumNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldNum, v))
}

// NumIn applies the In predicate on the "num" field.
func NumIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldNum, vs...))
}

// NumNotIn applies the NotIn predicate on the "num" field.
func NumNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldNum, vs...))
}

// NumGT applies the GT predicate on the "num" field.
func NumGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldNum, v))
}

// NumGTE applies the GTE predicate on the "num" field.
func NumGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldNum, v))
}

// NumLT applies the LT predicate on the "num" field.
func NumLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldNum, v))
}

// NumLTE applies the LTE predicate on the "num" field.
func NumLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldNum, v))
}

// ProductTypeEQ applies the EQ predicate on the "product_type" field.
func ProductTypeEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldProductType, v))
}

// ProductTypeNEQ applies the NEQ predicate on the "product_type" field.
func ProductTypeNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldProductType, v))
}

// ProductTypeIn applies the In predicate on the "product_type" field.
func ProductTypeIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldProductType, vs...))
}

// ProductTypeNotIn applies the NotIn predicate on the "product_type" field.
func ProductTypeNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldProductType, vs...))
}

// ProductTypeGT applies the GT predicate on the "product_type" field.
func ProductTypeGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldProductType, v))
}

// ProductTypeGTE applies the GTE predicate on the "product_type" field.
func ProductTypeGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldProductType, v))
}

// ProductTypeLT applies the LT predicate on the "product_type" field.
func ProductTypeLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldProductType, v))
}

// ProductTypeLTE applies the LTE predicate on the "product_type" field.
func ProductTypeLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldProductType, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldStatus, v))
}

// UDeleteTimeEQ applies the EQ predicate on the "u_delete_time" field.
func UDeleteTimeEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUDeleteTime, v))
}

// UDeleteTimeNEQ applies the NEQ predicate on the "u_delete_time" field.
func UDeleteTimeNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUDeleteTime, v))
}

// UDeleteTimeIn applies the In predicate on the "u_delete_time" field.
func UDeleteTimeIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUDeleteTime, vs...))
}

// UDeleteTimeNotIn applies the NotIn predicate on the "u_delete_time" field.
func UDeleteTimeNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUDeleteTime, vs...))
}

// UDeleteTimeGT applies the GT predicate on the "u_delete_time" field.
func UDeleteTimeGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUDeleteTime, v))
}

// UDeleteTimeGTE applies the GTE predicate on the "u_delete_time" field.
func UDeleteTimeGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUDeleteTime, v))
}

// UDeleteTimeLT applies the LT predicate on the "u_delete_time" field.
func UDeleteTimeLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUDeleteTime, v))
}

// UDeleteTimeLTE applies the LTE predicate on the "u_delete_time" field.
func UDeleteTimeLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUDeleteTime, v))
}

// UDeleteTimeIsNil applies the IsNil predicate on the "u_delete_time" field.
func UDeleteTimeIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldUDeleteTime))
}

// UDeleteTimeNotNil applies the NotNil predicate on the "u_delete_time" field.
func UDeleteTimeNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldUDeleteTime))
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreateTime, v))
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreateTime, v))
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreateTime, vs...))
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreateTime, vs...))
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreateTime, v))
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreateTime, v))
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreateTime, v))
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreateTime, v))
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldUpdateTime, v))
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldUpdateTime, v))
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldUpdateTime, vs...))
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldUpdateTime, vs...))
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldUpdateTime, v))
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldUpdateTime, v))
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldUpdateTime, v))
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldUpdateTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		p(s.Not())
	})
}
