// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"microServiceTemplate/internal/data/ent/order"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetOrderNo sets the "order_no" field.
func (oc *OrderCreate) SetOrderNo(s string) *OrderCreate {
	oc.mutation.SetOrderNo(s)
	return oc
}

// SetUserID sets the "user_id" field.
func (oc *OrderCreate) SetUserID(i int) *OrderCreate {
	oc.mutation.SetUserID(i)
	return oc
}

// SetProductID sets the "product_id" field.
func (oc *OrderCreate) SetProductID(i int) *OrderCreate {
	oc.mutation.SetProductID(i)
	return oc
}

// SetProductName sets the "product_name" field.
func (oc *OrderCreate) SetProductName(s string) *OrderCreate {
	oc.mutation.SetProductName(s)
	return oc
}

// SetProductLogo sets the "product_logo" field.
func (oc *OrderCreate) SetProductLogo(s string) *OrderCreate {
	oc.mutation.SetProductLogo(s)
	return oc
}

// SetPrice sets the "price" field.
func (oc *OrderCreate) SetPrice(f float64) *OrderCreate {
	oc.mutation.SetPrice(f)
	return oc
}

// SetDenomination sets the "denomination" field.
func (oc *OrderCreate) SetDenomination(f float64) *OrderCreate {
	oc.mutation.SetDenomination(f)
	return oc
}

// SetOriginalPrice sets the "original_price" field.
func (oc *OrderCreate) SetOriginalPrice(f float64) *OrderCreate {
	oc.mutation.SetOriginalPrice(f)
	return oc
}

// SetUnitPrice sets the "unit_price" field.
func (oc *OrderCreate) SetUnitPrice(f float64) *OrderCreate {
	oc.mutation.SetUnitPrice(f)
	return oc
}

// SetNum sets the "num" field.
func (oc *OrderCreate) SetNum(i int) *OrderCreate {
	oc.mutation.SetNum(i)
	return oc
}

// SetProductType sets the "product_type" field.
func (oc *OrderCreate) SetProductType(i int) *OrderCreate {
	oc.mutation.SetProductType(i)
	return oc
}

// SetStatus sets the "status" field.
func (oc *OrderCreate) SetStatus(i int) *OrderCreate {
	oc.mutation.SetStatus(i)
	return oc
}

// SetUDeleteTime sets the "u_delete_time" field.
func (oc *OrderCreate) SetUDeleteTime(t time.Time) *OrderCreate {
	oc.mutation.SetUDeleteTime(t)
	return oc
}

// SetNillableUDeleteTime sets the "u_delete_time" field if the given value is not nil.
func (oc *OrderCreate) SetNillableUDeleteTime(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetUDeleteTime(*t)
	}
	return oc
}

// SetCreateTime sets the "create_time" field.
func (oc *OrderCreate) SetCreateTime(t time.Time) *OrderCreate {
	oc.mutation.SetCreateTime(t)
	return oc
}

// SetUpdateTime sets the "update_time" field.
func (oc *OrderCreate) SetUpdateTime(t time.Time) *OrderCreate {
	oc.mutation.SetUpdateTime(t)
	return oc
}

// SetID sets the "id" field.
func (oc *OrderCreate) SetID(i int) *OrderCreate {
	oc.mutation.SetID(i)
	return oc
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	return withHooks[*Order, OrderMutation](ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.OrderNo(); !ok {
		return &ValidationError{Name: "order_no", err: errors.New(`ent: missing required field "Order.order_no"`)}
	}
	if _, ok := oc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Order.user_id"`)}
	}
	if _, ok := oc.mutation.ProductID(); !ok {
		return &ValidationError{Name: "product_id", err: errors.New(`ent: missing required field "Order.product_id"`)}
	}
	if _, ok := oc.mutation.ProductName(); !ok {
		return &ValidationError{Name: "product_name", err: errors.New(`ent: missing required field "Order.product_name"`)}
	}
	if _, ok := oc.mutation.ProductLogo(); !ok {
		return &ValidationError{Name: "product_logo", err: errors.New(`ent: missing required field "Order.product_logo"`)}
	}
	if _, ok := oc.mutation.Price(); !ok {
		return &ValidationError{Name: "price", err: errors.New(`ent: missing required field "Order.price"`)}
	}
	if _, ok := oc.mutation.Denomination(); !ok {
		return &ValidationError{Name: "denomination", err: errors.New(`ent: missing required field "Order.denomination"`)}
	}
	if _, ok := oc.mutation.OriginalPrice(); !ok {
		return &ValidationError{Name: "original_price", err: errors.New(`ent: missing required field "Order.original_price"`)}
	}
	if _, ok := oc.mutation.UnitPrice(); !ok {
		return &ValidationError{Name: "unit_price", err: errors.New(`ent: missing required field "Order.unit_price"`)}
	}
	if _, ok := oc.mutation.Num(); !ok {
		return &ValidationError{Name: "num", err: errors.New(`ent: missing required field "Order.num"`)}
	}
	if _, ok := oc.mutation.ProductType(); !ok {
		return &ValidationError{Name: "product_type", err: errors.New(`ent: missing required field "Order.product_type"`)}
	}
	if _, ok := oc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Order.status"`)}
	}
	if _, ok := oc.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "Order.create_time"`)}
	}
	if _, ok := oc.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "Order.update_time"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: order.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: order.FieldID,
			},
		}
	)
	_spec.OnConflict = oc.conflict
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oc.mutation.OrderNo(); ok {
		_spec.SetField(order.FieldOrderNo, field.TypeString, value)
		_node.OrderNo = value
	}
	if value, ok := oc.mutation.UserID(); ok {
		_spec.SetField(order.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := oc.mutation.ProductID(); ok {
		_spec.SetField(order.FieldProductID, field.TypeInt, value)
		_node.ProductID = value
	}
	if value, ok := oc.mutation.ProductName(); ok {
		_spec.SetField(order.FieldProductName, field.TypeString, value)
		_node.ProductName = value
	}
	if value, ok := oc.mutation.ProductLogo(); ok {
		_spec.SetField(order.FieldProductLogo, field.TypeString, value)
		_node.ProductLogo = value
	}
	if value, ok := oc.mutation.Price(); ok {
		_spec.SetField(order.FieldPrice, field.TypeFloat64, value)
		_node.Price = value
	}
	if value, ok := oc.mutation.Denomination(); ok {
		_spec.SetField(order.FieldDenomination, field.TypeFloat64, value)
		_node.Denomination = value
	}
	if value, ok := oc.mutation.OriginalPrice(); ok {
		_spec.SetField(order.FieldOriginalPrice, field.TypeFloat64, value)
		_node.OriginalPrice = value
	}
	if value, ok := oc.mutation.UnitPrice(); ok {
		_spec.SetField(order.FieldUnitPrice, field.TypeFloat64, value)
		_node.UnitPrice = value
	}
	if value, ok := oc.mutation.Num(); ok {
		_spec.SetField(order.FieldNum, field.TypeInt, value)
		_node.Num = value
	}
	if value, ok := oc.mutation.ProductType(); ok {
		_spec.SetField(order.FieldProductType, field.TypeInt, value)
		_node.ProductType = value
	}
	if value, ok := oc.mutation.Status(); ok {
		_spec.SetField(order.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := oc.mutation.UDeleteTime(); ok {
		_spec.SetField(order.FieldUDeleteTime, field.TypeTime, value)
		_node.UDeleteTime = value
	}
	if value, ok := oc.mutation.CreateTime(); ok {
		_spec.SetField(order.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := oc.mutation.UpdateTime(); ok {
		_spec.SetField(order.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetOrderNo(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetOrderNo(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetOrderNo sets the "order_no" field.
func (u *OrderUpsert) SetOrderNo(v string) *OrderUpsert {
	u.Set(order.FieldOrderNo, v)
	return u
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOrderNo() *OrderUpsert {
	u.SetExcluded(order.FieldOrderNo)
	return u
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsert) SetUserID(v int) *OrderUpsert {
	u.Set(order.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUserID() *OrderUpsert {
	u.SetExcluded(order.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *OrderUpsert) AddUserID(v int) *OrderUpsert {
	u.Add(order.FieldUserID, v)
	return u
}

// SetProductID sets the "product_id" field.
func (u *OrderUpsert) SetProductID(v int) *OrderUpsert {
	u.Set(order.FieldProductID, v)
	return u
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateProductID() *OrderUpsert {
	u.SetExcluded(order.FieldProductID)
	return u
}

// AddProductID adds v to the "product_id" field.
func (u *OrderUpsert) AddProductID(v int) *OrderUpsert {
	u.Add(order.FieldProductID, v)
	return u
}

// SetProductName sets the "product_name" field.
func (u *OrderUpsert) SetProductName(v string) *OrderUpsert {
	u.Set(order.FieldProductName, v)
	return u
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderUpsert) UpdateProductName() *OrderUpsert {
	u.SetExcluded(order.FieldProductName)
	return u
}

// SetProductLogo sets the "product_logo" field.
func (u *OrderUpsert) SetProductLogo(v string) *OrderUpsert {
	u.Set(order.FieldProductLogo, v)
	return u
}

// UpdateProductLogo sets the "product_logo" field to the value that was provided on create.
func (u *OrderUpsert) UpdateProductLogo() *OrderUpsert {
	u.SetExcluded(order.FieldProductLogo)
	return u
}

// SetPrice sets the "price" field.
func (u *OrderUpsert) SetPrice(v float64) *OrderUpsert {
	u.Set(order.FieldPrice, v)
	return u
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePrice() *OrderUpsert {
	u.SetExcluded(order.FieldPrice)
	return u
}

// AddPrice adds v to the "price" field.
func (u *OrderUpsert) AddPrice(v float64) *OrderUpsert {
	u.Add(order.FieldPrice, v)
	return u
}

// SetDenomination sets the "denomination" field.
func (u *OrderUpsert) SetDenomination(v float64) *OrderUpsert {
	u.Set(order.FieldDenomination, v)
	return u
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *OrderUpsert) UpdateDenomination() *OrderUpsert {
	u.SetExcluded(order.FieldDenomination)
	return u
}

// AddDenomination adds v to the "denomination" field.
func (u *OrderUpsert) AddDenomination(v float64) *OrderUpsert {
	u.Add(order.FieldDenomination, v)
	return u
}

// SetOriginalPrice sets the "original_price" field.
func (u *OrderUpsert) SetOriginalPrice(v float64) *OrderUpsert {
	u.Set(order.FieldOriginalPrice, v)
	return u
}

// UpdateOriginalPrice sets the "original_price" field to the value that was provided on create.
func (u *OrderUpsert) UpdateOriginalPrice() *OrderUpsert {
	u.SetExcluded(order.FieldOriginalPrice)
	return u
}

// AddOriginalPrice adds v to the "original_price" field.
func (u *OrderUpsert) AddOriginalPrice(v float64) *OrderUpsert {
	u.Add(order.FieldOriginalPrice, v)
	return u
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderUpsert) SetUnitPrice(v float64) *OrderUpsert {
	u.Set(order.FieldUnitPrice, v)
	return u
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUnitPrice() *OrderUpsert {
	u.SetExcluded(order.FieldUnitPrice)
	return u
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderUpsert) AddUnitPrice(v float64) *OrderUpsert {
	u.Add(order.FieldUnitPrice, v)
	return u
}

// SetNum sets the "num" field.
func (u *OrderUpsert) SetNum(v int) *OrderUpsert {
	u.Set(order.FieldNum, v)
	return u
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *OrderUpsert) UpdateNum() *OrderUpsert {
	u.SetExcluded(order.FieldNum)
	return u
}

// AddNum adds v to the "num" field.
func (u *OrderUpsert) AddNum(v int) *OrderUpsert {
	u.Add(order.FieldNum, v)
	return u
}

// SetProductType sets the "product_type" field.
func (u *OrderUpsert) SetProductType(v int) *OrderUpsert {
	u.Set(order.FieldProductType, v)
	return u
}

// UpdateProductType sets the "product_type" field to the value that was provided on create.
func (u *OrderUpsert) UpdateProductType() *OrderUpsert {
	u.SetExcluded(order.FieldProductType)
	return u
}

// AddProductType adds v to the "product_type" field.
func (u *OrderUpsert) AddProductType(v int) *OrderUpsert {
	u.Add(order.FieldProductType, v)
	return u
}

// SetStatus sets the "status" field.
func (u *OrderUpsert) SetStatus(v int) *OrderUpsert {
	u.Set(order.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsert) UpdateStatus() *OrderUpsert {
	u.SetExcluded(order.FieldStatus)
	return u
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsert) AddStatus(v int) *OrderUpsert {
	u.Add(order.FieldStatus, v)
	return u
}

// SetUDeleteTime sets the "u_delete_time" field.
func (u *OrderUpsert) SetUDeleteTime(v time.Time) *OrderUpsert {
	u.Set(order.FieldUDeleteTime, v)
	return u
}

// UpdateUDeleteTime sets the "u_delete_time" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUDeleteTime() *OrderUpsert {
	u.SetExcluded(order.FieldUDeleteTime)
	return u
}

// ClearUDeleteTime clears the value of the "u_delete_time" field.
func (u *OrderUpsert) ClearUDeleteTime() *OrderUpsert {
	u.SetNull(order.FieldUDeleteTime)
	return u
}

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsert) SetCreateTime(v time.Time) *OrderUpsert {
	u.Set(order.FieldCreateTime, v)
	return u
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreateTime() *OrderUpsert {
	u.SetExcluded(order.FieldCreateTime)
	return u
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsert) SetUpdateTime(v time.Time) *OrderUpsert {
	u.Set(order.FieldUpdateTime, v)
	return u
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsert) UpdateUpdateTime() *OrderUpsert {
	u.SetExcluded(order.FieldUpdateTime)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(order.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderNo sets the "order_no" field.
func (u *OrderUpsertOne) SetOrderNo(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOrderNo() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderNo()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertOne) SetUserID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *OrderUpsertOne) AddUserID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUserID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderUpsertOne) SetProductID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *OrderUpsertOne) AddProductID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateProductID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *OrderUpsertOne) SetProductName(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateProductName() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductName()
	})
}

// SetProductLogo sets the "product_logo" field.
func (u *OrderUpsertOne) SetProductLogo(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductLogo(v)
	})
}

// UpdateProductLogo sets the "product_logo" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateProductLogo() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductLogo()
	})
}

// SetPrice sets the "price" field.
func (u *OrderUpsertOne) SetPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *OrderUpsertOne) AddPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePrice() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePrice()
	})
}

// SetDenomination sets the "denomination" field.
func (u *OrderUpsertOne) SetDenomination(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetDenomination(v)
	})
}

// AddDenomination adds v to the "denomination" field.
func (u *OrderUpsertOne) AddDenomination(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateDenomination() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDenomination()
	})
}

// SetOriginalPrice sets the "original_price" field.
func (u *OrderUpsertOne) SetOriginalPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetOriginalPrice(v)
	})
}

// AddOriginalPrice adds v to the "original_price" field.
func (u *OrderUpsertOne) AddOriginalPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddOriginalPrice(v)
	})
}

// UpdateOriginalPrice sets the "original_price" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateOriginalPrice() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOriginalPrice()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderUpsertOne) SetUnitPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderUpsertOne) AddUnitPrice(v float64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUnitPrice() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetNum sets the "num" field.
func (u *OrderUpsertOne) SetNum(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *OrderUpsertOne) AddNum(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateNum() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNum()
	})
}

// SetProductType sets the "product_type" field.
func (u *OrderUpsertOne) SetProductType(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductType(v)
	})
}

// AddProductType adds v to the "product_type" field.
func (u *OrderUpsertOne) AddProductType(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddProductType(v)
	})
}

// UpdateProductType sets the "product_type" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateProductType() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductType()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertOne) SetStatus(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertOne) AddStatus(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateStatus() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetUDeleteTime sets the "u_delete_time" field.
func (u *OrderUpsertOne) SetUDeleteTime(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUDeleteTime(v)
	})
}

// UpdateUDeleteTime sets the "u_delete_time" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUDeleteTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUDeleteTime()
	})
}

// ClearUDeleteTime clears the value of the "u_delete_time" field.
func (u *OrderUpsertOne) ClearUDeleteTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUDeleteTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsertOne) SetCreateTime(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreateTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsertOne) SetUpdateTime(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateUpdateTime() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetOrderNo(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(order.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(order.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetOrderNo sets the "order_no" field.
func (u *OrderUpsertBulk) SetOrderNo(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOrderNo(v)
	})
}

// UpdateOrderNo sets the "order_no" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOrderNo() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOrderNo()
	})
}

// SetUserID sets the "user_id" field.
func (u *OrderUpsertBulk) SetUserID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *OrderUpsertBulk) AddUserID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUserID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUserID()
	})
}

// SetProductID sets the "product_id" field.
func (u *OrderUpsertBulk) SetProductID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductID(v)
	})
}

// AddProductID adds v to the "product_id" field.
func (u *OrderUpsertBulk) AddProductID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddProductID(v)
	})
}

// UpdateProductID sets the "product_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateProductID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductID()
	})
}

// SetProductName sets the "product_name" field.
func (u *OrderUpsertBulk) SetProductName(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductName(v)
	})
}

// UpdateProductName sets the "product_name" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateProductName() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductName()
	})
}

// SetProductLogo sets the "product_logo" field.
func (u *OrderUpsertBulk) SetProductLogo(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductLogo(v)
	})
}

// UpdateProductLogo sets the "product_logo" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateProductLogo() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductLogo()
	})
}

// SetPrice sets the "price" field.
func (u *OrderUpsertBulk) SetPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPrice(v)
	})
}

// AddPrice adds v to the "price" field.
func (u *OrderUpsertBulk) AddPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddPrice(v)
	})
}

// UpdatePrice sets the "price" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePrice() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePrice()
	})
}

// SetDenomination sets the "denomination" field.
func (u *OrderUpsertBulk) SetDenomination(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetDenomination(v)
	})
}

// AddDenomination adds v to the "denomination" field.
func (u *OrderUpsertBulk) AddDenomination(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddDenomination(v)
	})
}

// UpdateDenomination sets the "denomination" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateDenomination() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateDenomination()
	})
}

// SetOriginalPrice sets the "original_price" field.
func (u *OrderUpsertBulk) SetOriginalPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetOriginalPrice(v)
	})
}

// AddOriginalPrice adds v to the "original_price" field.
func (u *OrderUpsertBulk) AddOriginalPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddOriginalPrice(v)
	})
}

// UpdateOriginalPrice sets the "original_price" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateOriginalPrice() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateOriginalPrice()
	})
}

// SetUnitPrice sets the "unit_price" field.
func (u *OrderUpsertBulk) SetUnitPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUnitPrice(v)
	})
}

// AddUnitPrice adds v to the "unit_price" field.
func (u *OrderUpsertBulk) AddUnitPrice(v float64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddUnitPrice(v)
	})
}

// UpdateUnitPrice sets the "unit_price" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUnitPrice() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUnitPrice()
	})
}

// SetNum sets the "num" field.
func (u *OrderUpsertBulk) SetNum(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetNum(v)
	})
}

// AddNum adds v to the "num" field.
func (u *OrderUpsertBulk) AddNum(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddNum(v)
	})
}

// UpdateNum sets the "num" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateNum() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateNum()
	})
}

// SetProductType sets the "product_type" field.
func (u *OrderUpsertBulk) SetProductType(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetProductType(v)
	})
}

// AddProductType adds v to the "product_type" field.
func (u *OrderUpsertBulk) AddProductType(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddProductType(v)
	})
}

// UpdateProductType sets the "product_type" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateProductType() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateProductType()
	})
}

// SetStatus sets the "status" field.
func (u *OrderUpsertBulk) SetStatus(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetStatus(v)
	})
}

// AddStatus adds v to the "status" field.
func (u *OrderUpsertBulk) AddStatus(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateStatus() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateStatus()
	})
}

// SetUDeleteTime sets the "u_delete_time" field.
func (u *OrderUpsertBulk) SetUDeleteTime(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUDeleteTime(v)
	})
}

// UpdateUDeleteTime sets the "u_delete_time" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUDeleteTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUDeleteTime()
	})
}

// ClearUDeleteTime clears the value of the "u_delete_time" field.
func (u *OrderUpsertBulk) ClearUDeleteTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearUDeleteTime()
	})
}

// SetCreateTime sets the "create_time" field.
func (u *OrderUpsertBulk) SetCreateTime(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreateTime(v)
	})
}

// UpdateCreateTime sets the "create_time" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreateTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreateTime()
	})
}

// SetUpdateTime sets the "update_time" field.
func (u *OrderUpsertBulk) SetUpdateTime(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetUpdateTime(v)
	})
}

// UpdateUpdateTime sets the "update_time" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateUpdateTime() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateUpdateTime()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
